@{
    Layout = "_Layout_Cliente";
    ViewData["Title"] = "Crear Nuevo Ticket";
}

<div class="main-content">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Crear un nuevo ticket</h1>
        <p class="dashboard-subtitle">Complete el formulario para reportar un problema o solicitar un servicio</p>
    </div>

    <div class="tasks-section pending-section">
        <div class="section-header">
            <h2 class="section-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Nuevo Ticket
            </h2>
        </div>
        
        <div class="tasks-grid">
            <div class="task-card pending-card" style="grid-column: 1 / -1; max-width: none;">
                <form id="ticketForm" method="post" enctype="multipart/form-data" class="task-content">
                    <!-- Categoría y Problema -->
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Categoría</label>
                            <select id="categoriaSelect" class="form-select" required>
                                <option value="">Elegir una opción</option>
                                @foreach (var cat in (IEnumerable<dynamic>)ViewData["listaCategorias"])
                                {
                                    <option value="@cat.categoriaId">@cat.nombre</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Aplicación o Servicio</label>
                            <select id="problemaSelect" name="problemaId" class="form-select" required>
                                <option value="">Primero seleccione una categoría</option>
                            </select>
                        </div>
                    </div>

                    <!-- Descripción -->
                    <div class="form-group">
                        <label class="form-label">Descripción del problema</label>
                        <textarea name="descripcion" class="form-control form-textarea"
                                  placeholder="Describa detalladamente el problema o servicio que desea solicitar..." required></textarea>
                    </div>

                    <!-- Prioridad -->
                    <div class="form-group">
                        <label class="form-label">Prioridad</label>
                        @Html.DropDownList("prioridadId", ViewData["listaPrioridades"] as SelectList, "Elegir una opción",
                                 new { @class = "form-select", required = "required" })
                    </div>

                    <!-- Información del usuario -->
                    <div class="user-info-section">
                        <h3 class="section-subtitle">Información del solicitante</h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Nombre</label>
                                <input type="text" class="form-control" 
                                       value="@Context.Session.GetString("nombre")" readonly />
                            </div>
                            <div class="form-group">
                                <label class="form-label">Teléfono</label>
                                <input type="text" class="form-control" 
                                       value="@Context.Session.GetString("telefono")" readonly />
                            </div>
                            <div class="form-group">
                                <label class="form-label">Correo electrónico</label>
                                <input type="email" class="form-control" 
                                       value="@Context.Session.GetString("correo")" readonly />
                            </div>
                        </div>
                    </div>

                    <!-- Adjuntar archivo -->
                    <div class="form-group">
                        <label class="form-label">Adjuntar archivos</label>
                        <div class="file-upload-area">
                            <div id="archivoInfo" class="file-info">
                                <div class="file-placeholder">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="24" height="24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                    </svg>
                                    <span>Ningún archivo seleccionado</span>
                                </div>
                            </div>
                        </div>
                        <input type="file" id="archivoAdjunto" name="archivoAdjunto" class="form-control file-input"
                               onchange="mostrarInfoArchivo(this)" />
                    </div>

                    <!-- Botones -->
                    <div class="form-actions">
                        <a href="@Url.Action("Dashboard")" class="btn btn-secondary">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                            Cancelar
                        </a>
                        <button type="submit" class="btn-view">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                            </svg>
                            Enviar Ticket
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Estilos específicos para el formulario de crear ticket */
    .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0;
    }

    .form-control, .form-select {
        padding: 0.75rem 1rem;
        border: 2px solid var(--border-color);
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: all 0.2s ease;
        background-color: white;
    }

    .form-control:focus, .form-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .form-control:hover, .form-select:hover {
        border-color: var(--primary-dark);
    }

    .form-control[readonly] {
        background-color: var(--light-gray);
        color: var(--text-secondary);
        cursor: not-allowed;
    }

    .form-textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }

    .user-info-section {
        background: var(--light-gray);
        padding: 1.5rem;
        border-radius: 1rem;
        border: 1px solid var(--border-color);
        margin: 1.5rem 0;
    }

    .section-subtitle {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 1rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .file-upload-area {
        border: 2px dashed var(--border-color);
        border-radius: 0.75rem;
        padding: 1.5rem;
        text-align: center;
        background: var(--light-gray);
        transition: all 0.3s ease;
        margin-bottom: 0.75rem;
    }

    .file-upload-area:hover {
        border-color: var(--primary-color);
        background: rgba(99, 102, 241, 0.05);
    }

    .file-info {
        color: var(--text-secondary);
    }

    .file-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

    .file-placeholder svg {
        color: var(--text-secondary);
    }

    .file-input {
        margin-top: 0.5rem;
    }

    .file-selected {
        background: white;
        border: 2px solid var(--success-color);
        color: var(--text-primary);
    }

    .file-selected .file-placeholder {
        flex-direction: row;
        justify-content: space-between;
        text-align: left;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--border-color);
    }

    .btn-secondary {
        background: var(--medium-gray);
        color: var(--text-secondary);
        border: 2px solid var(--border-color);
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-secondary:hover {
        background: var(--border-color);
        color: var(--text-primary);
        transform: translateY(-1px);
        box-shadow: var(--shadow-md);
        text-decoration: none;
    }


</style>

@section Scripts {
    <script>
        // Cargar problemas según categoría seleccionada
        document.getElementById('categoriaSelect').addEventListener('change', function () {
            var categoriaId = this.value;
            var problemaSelect = document.getElementById('problemaSelect');

            if (categoriaId) {
                fetch('/Cliente/ObtenerProblemasPorCategoria?categoriaId=' + categoriaId)
                    .then(response => response.json())
                    .then(data => {
                        problemaSelect.innerHTML = '<option value="">Elegir una opción</option>';
                        data.forEach(function (problema) {
                            var option = document.createElement('option');
                            option.value = problema.problemaId;
                            option.textContent = problema.nombre;
                            problemaSelect.appendChild(option);
                        });
                    });
            } else {
                problemaSelect.innerHTML = '<option value="">Primero seleccione una categoría</option>';
            }
        });

        // Mostrar información del archivo seleccionado
        function mostrarInfoArchivo(input) {
            const archivoInfo = document.getElementById('archivoInfo');
            const uploadArea = archivoInfo.closest('.file-upload-area');

            if (input.files && input.files[0]) {
                const file = input.files[0];
                const fileSize = (file.size / (1024 * 1024)).toFixed(2);

                uploadArea.classList.add('file-selected');
                archivoInfo.innerHTML = `
                    <div class="file-placeholder">
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="20" height="20">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            <div>
                                <strong>${file.name}</strong>
                                <div style="font-size: 0.75rem; color: var(--text-secondary);">
                                    ${fileSize} MB • ${file.type || 'Tipo no especificado'}
                                </div>
                            </div>
                        </div>
                        <span style="color: var(--success-color); font-weight: 600;">✓ Archivo seleccionado</span>
                    </div>
                `;
            } else {
                uploadArea.classList.remove('file-selected');
                archivoInfo.innerHTML = `
                    <div class="file-placeholder">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="24" height="24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        <span>Ningún archivo seleccionado</span>
                    </div>
                `;
            }
        }

        // Manejar envío del formulario
        document.getElementById('ticketForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            // Deshabilitar el botón de envío para evitar múltiples envíos
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = `
                <svg class="animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Enviando...
            `;

            try {
                const formData = new FormData(this);
                const response = await fetch('/Cliente/CrearTicket', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Si hay archivo adjunto, subirlo después de crear el ticket
                        const archivoInput = document.getElementById('archivoAdjunto');
                        if (archivoInput.files && archivoInput.files[0]) {
                            const archivoData = new FormData();
                            archivoData.append('ticketId', result.ticketId);
                            archivoData.append('archivo', archivoInput.files[0]);

                            await fetch('/Cliente/SubirArchivo', {
                                method: 'POST',
                                body: archivoData
                            });
                        }
                        
                        // Mostrar mensaje de éxito antes de redirigir
                        submitBtn.innerHTML = `
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            ¡Enviado!
                        `;
                        
                        setTimeout(() => {
                            window.location.href = '/Cliente/Dashboard';
                        }, 1000);
                    } else {
                        throw new Error(result.message || 'Error al crear el ticket');
                    }
                } else {
                    throw new Error('Error en la solicitud');
                }
            } catch (error) {
                alert('Error al crear el ticket: ' + error.message);
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        });
    </script>
}
